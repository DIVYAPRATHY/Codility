1. The simplest way is to iterate the array and find the least abs value. The time compexity is O(N * N),which is bad.
class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        if (A.length ==1) {
           return A[0];
        }
              
        int sum = 0;
        for (int i=0; i<A.length;i++) {
            sum += A[i];
        }
        
        int least = Math.abs(A[0]-(sum-A[0]));    
        System.out.println(least);
        int leftSum = 0;
        for (int i=1; i<A.length;i++) {
            for (int j = 0; j<i; j++){
               leftSum += A[j];
            }
            
            least = less(least, Math.abs(leftSum - (sum - leftSum)));
            leftSum = 0;
            
        }
    
        return least;
    }
    
    public int less (int i, int j) {
       if (i<=j){
          return i; 
        }else {
          return j;
        }    
    }
}
2. This method is a little improvement of the first method. Time complexity is O(N)
class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8

        if (A.length ==2) {
           return A[1]-A[0];
        }
              
        int sum = 0;
        for (int i=0; i<A.length;i++) {
            sum += A[i];
        }
        
        //P[N]is thje leftSum, P[1] = A[0]; P[2] = A[0] + A[1],P[0] is useless
        int [] P = new int[A.length];      
        for (int i=0; i<P.length;i++) {
            P[i] = 0;            
        }

        for (int i=1; i<A.length;i++) {
            P[i] = A[i-1] + P[i-1];            
        }
        
        int least = Math.abs(P[1]-(sum-P[1]));    
        
        for (int i=1; i<P.length;i++) {
            least = less(least, Math.abs(P[i]-(sum-P[i])));            
        }
    
        return least;
    }
    
    public int less (int i, int j) {
       if (i<=j){
          return i; 
        }else {
          return j;
        }    
    }
}

Score: 100%